// Code generated by mockery v2.36.0. DO NOT EDIT.

package greeting

import mock "github.com/stretchr/testify/mock"

// MockServicer is an autogenerated mock type for the Servicer type
type MockServicer struct {
	mock.Mock
}

type MockServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicer) EXPECT() *MockServicer_Expecter {
	return &MockServicer_Expecter{mock: &_m.Mock}
}

// HelloMessage provides a mock function with given fields: name
func (_m *MockServicer) HelloMessage(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockServicer_HelloMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HelloMessage'
type MockServicer_HelloMessage_Call struct {
	*mock.Call
}

// HelloMessage is a helper method to define mock.On call
//   - name string
func (_e *MockServicer_Expecter) HelloMessage(name interface{}) *MockServicer_HelloMessage_Call {
	return &MockServicer_HelloMessage_Call{Call: _e.mock.On("HelloMessage", name)}
}

func (_c *MockServicer_HelloMessage_Call) Run(run func(name string)) *MockServicer_HelloMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServicer_HelloMessage_Call) Return(_a0 string) *MockServicer_HelloMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicer_HelloMessage_Call) RunAndReturn(run func(string) string) *MockServicer_HelloMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicer creates a new instance of MockServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicer {
	mock := &MockServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
